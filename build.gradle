// build.gradle for a Minecraft Forge mod
// Originally based on build.gradle from Botania by vazkii - https://botaniamod.net/

// START do not edit
buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
  id "com.matthewprenger.cursegradle" version "1.0.10"
  id "co.riiid.gradle" version "0.4.2"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven'
// END do not edit
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

ext.configFile = file('build.properties')
ext.privateFile = file('private.properties')

ext.config = parseConfig(configFile)
ext.priv = parseConfigIf(privateFile)


minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "eclipse"

    mappings = config.mc_mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // This does the token replacement so names, version numbers, etc only need to be in one authoritative file
    replace '@MOD_ID@', config.mod_id
    replace '@MOD_NAME@', config.mod_name
    replace '@BUILD@', config.build_number
    replace '@VERSION@', config.version
    replace '@INTERNALVERSIONMAJOR@', config.internal_version_major
    replace '@DEPENDENCIES@', config.dependencies
    replace '@UPDATEJSON@', config.updatejson
}

version = config.version
group = config.group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_id

sourceSets {
    main {
        java { srcDirs = ["$projectDir/src/java"] }
        resources { srcDirs = ["$projectDir/src/resources"] }
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "updatejson", config.updatejson

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace mcmod.info variables with build.properties settings
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'updatejson':config.updatejson
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    //rename the default output, for some better sanity with scripts
    archiveName = "${baseName}-${minecraft.version}-${version}.${extension}"

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
}

/// Local functions

// parse the config file (in Java properties format)
def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

// if the file exists, parse the config file (in Java properties format)
def parseConfigIf(File config) {
    if (config.isFile()) {
       return parseConfig(config)
    }
    return new ConfigObject()
}

// get this version's changelog from Forge-format update.json
def getChangeInfo() {
    def filename = "${projectDir}/${config.changelog}"
    def updateJsonFile = new File(filename)
    if (!updateJsonFile.isFile()) {
        throw new GradleException("${filename} missing")               
    }
    def updateJson = new JsonSlurper().parse(updateJsonFile) as Map
    // this should error if changelog is missing change for this version - add one!
    if (!updateJson.containsKey("${minecraft.version}") || !updateJson."${minecraft.version}".containsKey("${version}")) {
        throw new GradleException("${filename} missing changelog for ${minecraft.version} ${version}")               
    }
    return new String(updateJson."${minecraft.version}"."${version}")
}

// build our own archive path that is relative and unix-format
// since jar.archivePath is Windows format absolute path and github plugin makes ugly Github release asset file name from it
def getArchivePath() {
	return new String("build/libs/${jar.archiveName}")
}

/// CurseGradle

curseforge {
    apiKey = priv.cfkey
    project {
        id = config.curseforge_id
        changelog = { ->
            return getChangeInfo()
        }
        releaseType = "release"
    }
}
 
/// Github

github {
    owner = config.github_owner
    repo = config.github_repo
    token = priv.github_token
    name = "${config.version}"
    tagName = "${config.version}"
    body = getChangeInfo()
    assets = [ getArchivePath() ]
}
